#!/usr/bin/env bash

# This script prepares a initramfs that can boot a NodeOS rootfs

GRN="\e[32m"
CLR="\e[0m"


BAREBONES=`pwd`/../nodeos-barebones
NODE_DIR=$BAREBONES/deps/node

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/out

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


if [[ -z "$name" ]]; then name=initramfs; fi

if [[ -d $OBJECTS ]]; then
  chmod -R u+w $OBJECTS &&
  rm    -rf    $OBJECTS || exit 200
fi
mkdir -p $OBJECTS || exit 201

#case $PLATFORM in
#  qemu)
#    gunzip -c $BAREBONES/barebones.cpio.gz |
#    (
#      cd "$OBJECTS";
#      cpio -i -d -H newc --no-absolute-filenames
#    ) || exit 201
#  ;;
#esac


#
# Install system dependencies
#

CC=$TARGET-gcc                  \
CXX=$TARGET-g++                 \
npm_config_prefix=$OBJECTS      \
$NODE_DIR/deps/npm/cli.js       \
    install -g                  \
    --loglevel warn             \
    --arch=$NODE_ARCH           \
    --nodedir=$NODE_DIR         \
    --jobs=$JOBS                \
    `grep -v "^#" packages.txt` || exit 210

ln -fs bin/century $OBJECTS/init || exit 211

mkdir -p $OBJECTS/sbin                                    &&
ln -fs ../bin/nodeos-mount-filesystems $OBJECTS/sbin/init || exit 212


#
# /usr/bin/env
#

mkdir -p  $OBJECTS/usr/bin     &&
cp env.js $OBJECTS/usr/bin/env || exit 220


#
# Wrap the system up and pack it
#

# Set initramfs files only accesible to root
chmod -R u-w,go-rw "$OBJECTS"             &&
chmod -R go+r      "$OBJECTS/usr/bin/env" || exit 230

case $PLATFORM in
  docker)
    docker build -t $name . || exit 231
  ;;
  pc_qemu | pc_image | raspberry_qemu | raspberry_image)
    mkdir -p `dirname $OUT_DIR`
    (
      cd "$OBJECTS";
      find | cpio --owner root:root -o -H newc | gzip
    ) > $OUT_DIR || exit 232

    ln -sfv $OUT_DIR $name.cpio.gz || exit 28
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
